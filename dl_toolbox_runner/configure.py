import xarray as xr
import numpy as np 
import pandas as pd

from dl_toolbox_runner.errors import MissingConfig
from dl_toolbox_runner.utils.config_utils import get_conf
from dl_toolbox_runner.utils.file_utils import abs_file_path, get_config_path, get_insttype, dict_to_file, open_sweep_group
from dl_toolbox_runner.log import logger

class Configurator(object):
    """Class for setting up config file for usage in DL toolbox run

    The required information is taken from the filename and contents of the data file, from a main and an inst config

    Args:
        datafile: filename of the data file to be processed
        configfile: filename of the configuration file generated by running this class
    """

    def __init__(self, instrument_id, scan_type, datafile, configfile, main_config, file_default_config='dl_toolbox_runner/config/default_config.yaml',
                 file_conf_param_match='dl_toolbox_runner/config/conf_match.yaml'):

        self.conf = get_conf(abs_file_path(file_default_config))  # init with defaults from file, update later in code
        self.instrument_id = instrument_id
        self.scan_type = scan_type
        self.datafile = datafile
        self.configfile = configfile
        self.main_config = main_config
        self.conf_param_match = get_conf(abs_file_path(file_conf_param_match))
        self.date = None  # datetime.datetime object for timesteamp of datafile

    def run(self):
        logger.info('Treating: '+self.instrument_id)
        basename = self.main_config['input_file_prefix']+'XXXWL_'
        instrument_type, self.date = get_insttype(self.datafile, base_filename=basename,
                                                         return_date=True)
        
        # get config file corresponding to instrument type
        config_filepath = get_config_path(self.main_config['inst_config_dir'] + self.main_config['inst_config_file_prefix'] + instrument_type + '.yaml')
        self.conf = get_conf(config_filepath)
        
        # Test if the instrument type corresponds to the one in the main config
        if self.conf['system'] != instrument_type:
            logger.error(f"Configured instrument type ({instrument_type}) does not match the one in the main config ({self.conf['system']})")
            raise MissingConfig("Configured instrument type does not match the one in the main config")

        logger.info(f'Configuring {instrument_type} with scan type {self.scan_type}')
        logger.info(f'Read config file: {config_filepath}')
        self.conf['inst_type'] = instrument_type
        self.conf['scan_type'] = self.scan_type
        self.conf['NC_instrument_id'] = self.instrument_id

        self.from_datafile()
        self.to_file()
        logger.info('Config file for '+self.conf['NC_instrument_id']+f' written to {self.configfile}')

    def from_datafile(self):
        # Some parameters needs to be read in the filename / file
        ds = xr.open_dataset(self.datafile)
                
        if self.conf['inst_type'] == 'windcube':            
            # From filename:
            self.conf['NC_L2_path'] = self.main_config['output_dir']
            self.conf['NC_L2_basename'] = self.main_config['output_file_prefix'] + self.conf['NC_instrument_id'] + '_'

            # General variables
            self.conf['system_longitude'] = float(ds.longitude.data)
            self.conf['system_latitude'] = float(ds.latitude.data)
            #self.conf['system_altitude'] =  float(ds.altitude.data)
            
            # Reading the altitude of the instrument from config file 
            # TODO: check if the altitude can be read from file but for windcube it is not (always) the case
            #if np.isnan(self.conf['system_altitude']):
            logger.warning("Altitude not read from file but from csv file")
            # if the altitude is not given in the file, we read the altitude from the site in the csv config file
            dl_list_filename = get_config_path(self.main_config['inst_config_dir'] + self.main_config['dl_list_filename'])
            # read altitude from csv file
            dl_list = pd.read_csv(dl_list_filename)
            dl = dl_list[dl_list['identifier'] == self.instrument_id]
            self.conf['system_altitude'] = dl.altitude.values[0]
            
            # Name of the sweep group (always different in Windcube files)
            group_name = ds.sweep_group_name.data[0]
            
            ds_sweep = open_sweep_group(self.datafile, group_name)
                
            self.conf['range_gate_lenth'] = float(ds_sweep.range_gate_length.data)
            self.conf['number_of_gates'] = len(ds_sweep.gate_index.data)
            
            if 'FIXED' in self.conf['scan_type']:
                self.conf['number_of_gate_points']=1
        
        elif self.conf['inst_type'] == 'halo':
            logger.error("Halo configuration not implemented yet")
            raise NotImplementedError("Halo configuration not implemented yet")
        pass
        

    def to_file(self):
        try:
            conf_out = {key_out: self.conf[key_in] for key_in, key_out in self.conf_param_match.items()}
        except KeyError as err:
            raise MissingConfig(f'missing entry for {err} in config dict')
        dict_to_file(conf_out, self.configfile, '=')


if __name__ == '__main__':
    datafile = abs_file_path('dl_toolbox_runner/data/input/DWL_raw_PAYWL_2023-01-01_00-06-12_dbs_303_50mTP.nc')
    configfile = abs_file_path('dl_toolbox_runner/data/toolbox/sample_config/PAYWL_DBS_TP.conf')
    defaultconfigfile = abs_file_path('dl_toolbox_runner/config/default_config_windcube.yaml')
    mainconfigfile = abs_file_path('dl_toolbox_runner/config/main_config.yaml')
    x = Configurator('PAYWL', 'DBS_TP',  datafile, configfile, main_config=get_conf(mainconfigfile), file_default_config=defaultconfigfile)
    x.run()
    pass
